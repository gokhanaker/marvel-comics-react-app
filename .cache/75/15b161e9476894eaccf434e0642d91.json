{"id":"index.css","dependencies":[{"name":"_css_loader","parent":"/Users/gokhan/Documents/React_Projects_Workspace/harvard-art-museum-react-app/src/index.css","resolved":"/Users/gokhan/Documents/React_Projects_Workspace/harvard-art-museum-react-app/node_modules/parcel-bundler/src/builtins/css-loader.js"},{"name":"/Users/gokhan/Documents/React_Projects_Workspace/harvard-art-museum-react-app/package.json","includedInParent":true,"mtime":1552791797499}],"generated":{"css":"\n/* global require,exports, console */\nvar http = require('http');\nvar crypto = require('crypto');\n\nvar cache = [];\n\nvar PRIV_KEY = \"48af838ae9b8f46c248878cf32db00c7ebe8e3c6\";\nvar API_KEY = \"b234161539619aee8f067f5a132ec1f3\";\n\n//default not avail image\nvar IMAGE_NOT_AVAIL = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available\";\n\nexports.getCache = function() { return cache; };\n\nfunction getRandomInt (min, max) {\n\treturn Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nObject.size = function(obj) {\n    var size = 0, key;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) size++;\n    }\n    return size;\n};\n\nfunction getCover(cb) {\n\t//first select a random year\n\tvar year = getRandomInt(1960, 2013);\n\t//then a month\n\tvar month = getRandomInt(1,12);\n\n\tvar cache_key = year + \"_\" + month;\n\t\n\tif(cache_key in cache) {\n\t\tconsole.log('had cache for '+cache_key);\n\t\tvar images = cache[cache_key].images;\n\t\tcache[cache_key].hits++;\n\t\tcb(images[getRandomInt(0, images.length-1)]);\t\t\n\t} else {\n\t\tvar monthStr = month<10?\"0\"+month:month;\n\t\t//lame logic for end of month\n\t\tvar eom = month==2?28:30;\n\t\tvar beginDateStr = year + \"-\" + monthStr + \"-01\";\n\t\tvar endDateStr = year + \"-\" + monthStr + \"-\" + eom;\n\t\tvar url = \"http://gateway.marvel.com/v1/public/comics?limit=100&format=comic&formatType=comic&dateRange=\"+beginDateStr+\"%2C\"+endDateStr+\"&apikey=\"+API_KEY;\n\t\tvar ts = new Date().getTime();\n\t\tvar hash = crypto.createHash('md5').update(ts + PRIV_KEY + API_KEY).digest('hex');\n\t\turl += \"&ts=\"+ts+\"&hash=\"+hash;\n\t\t//TEMP\n\t\t//var url =\"http://127.0.0.1/testingzone/html5tests/marvel/resp.json\";\n\t\t\n\t\tconsole.log(new Date()+' '+url);\n\t\t\n\t\thttp.get(url, function(res) {\n\t\t\tvar body = \"\";\n\n\t\t\tres.on('data', function (chunk) {\n\t\t\t\tbody += chunk;\n\t\t\t});\n\t\t\t\n\t\t\tres.on('end', function() {\n\t\t\t\t//result.success = true;\n\n\t\t\t\tvar result = JSON.parse(body);\n\t\t\t\tvar images;\n\t\t\t\t\n\t\t\t\tif(result.code === 200) {\n\t\t\t\t\timages = [];\n\t\t\t\t\tconsole.log('num of comics '+result.data.results.length);\n\t\t\t\t\tfor(var i=0;i<result.data.results.length;i++) {\n\t\t\t\t\t\tvar comic = result.data.results[i];\n\t\t\t\t\t\t//console.dir(comic);\n\t\t\t\t\t\tif(comic.thumbnail && comic.thumbnail.path != IMAGE_NOT_AVAIL) {\n\t\t\t\t\t\t\tvar image = {};\n\t\t\t\t\t\t\timage.title = comic.title;\n\t\t\t\t\t\t\tfor(var x=0; x<comic.dates.length;x++) {\n\t\t\t\t\t\t\t\tif(comic.dates[x].type === 'onsaleDate') {\n\t\t\t\t\t\t\t\t\timage.date = new Date(comic.dates[x].date);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\timage.url = comic.thumbnail.path + \".\" + comic.thumbnail.extension;\n\t\t\t\t\t\t\timages.push(image);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//console.dir(images);\n\t\t\t\t\t//now cache it\n\t\t\t\t\tcache[cache_key] = {hits:1};\n\t\t\t\t\tcache[cache_key].images = images;\n\t\t\t\t\tcb(images[getRandomInt(0, images.length-1)]);\n\t\t\t\t} else if(result.code === \"RequestThrottled\") {\n\t\t\t\t\tconsole.log(\"RequestThrottled Error\");\n\t\t\t\t\t/*\n\t\t\t\t\tSo don't just fail. If we have a good cache, just grab from there\n\t\t\t\t\t*/\n\t\t\t\t\tif(Object.size(cache) > 5) {\n\t\t\t\t\t\tvar keys = [];\n\t\t\t\t\t\tfor(var k in cache) keys.push(k);\n\t\t\t\t\t\tvar randomCacheKey = keys[getRandomInt(0,keys.length-1)];\n\t\t\t\t\t\timages = cache[randomCacheKey].images;\n\t\t\t\t\t\tcache[randomCacheKey].hits++;\n\t\t\t\t\t\tcb(images[getRandomInt(0, images.length-1)]);\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcb({error:result.code});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(new Date() + ' Error: '+JSON.stringify(result));\n\t\t\t\t\tcb({error:result.code});\n\t\t\t\t}\n\t\t\t\t//console.log(data);\n\t\t\t});\n\t\t\n\t\t});\n\t}\n\n}\n\nexports.getCover = getCover;","js":"var reloadCSS = require('_css_loader');\n\nmodule.hot.dispose(reloadCSS);\nmodule.hot.accept(reloadCSS);"},"hash":"51ca2716368fbafde3ea2579465d7b25","cacheData":{"env":{}}}